USE_LR_PARSER

Program

(* ======================================================================================================= *)
<prog> ::= <statement_list>.
<statement_list> ::= <epsilon>
    | <statement>";" <statement_list>.
<epsilon> ::= .
<statement> ::= <init>
    | <assign>
    | <decl>
    | <block>
    | <for_Loop>
    | <while_Loop>
    | <branch>
    | <change>
    | <print_result>.
<init> ::= <decl> ":=" <expr>.
<assign> ::= <id> ":=" <expr>.
<decl> ::= "int" <id>
    | "bool" <id>.
<id> ::= identifier.
<block> ::= "{"<statement_list>"}".
<for_loop> ::= "for" "(" <init> ";" <expr> ";" <change> ")" <block>
    | "for" "(" <init> ";" <expr> ";" <assign> ")" <block>.
<while_loop> ::= "while" "(" <expr> ")" <block>.
<branch> ::= "if" <expr> "then" <block>
    | "if" <expr> "then" <block> "else" <block>.
<change>::= <pre_inc>
    | <post_inc>
    | <pre_dec>
    | <post_dec>.
<pre_inc> ::= "++"<id>.
<post_inc> ::= <id>"++".
<pre_dec> ::= "--"<id>.
<post_dec> ::= <id>"--".
<expr> ::= <expr> "or" <logical_and>
    | <logical_and>.
<logical_and> ::= <logical_and> "and" <equality>
    | <equality>.
<equality> ::= <relational> "=" <relational>
    | <relational> "!=" <relational>
    | <relational>.
<relational> ::= <additive> "<" <additive> 
    | <additive> ">" <additive>
    | <additive> "<=" <additive>
    | <additive> ">=" <additive>
    | <additive>.
<additive> ::= <additive> "+" <multiplicative>
    | <additive> "-" <multiplicative>
    | <multiplicative>.
<multiplicative> ::= <multiplicative> "*" <negation>
    | <multiplicative> "div" <negation>
    | <multiplicative> "mod" <negation>
    | <negation>.
<negation> ::= "not" <negation>
    | "-"<negation>
    | <exponentiation>.
<exponentiation> ::= <final> "^" <exponentiation>
    | <final>.
<final> ::= "("<expr>")"
    | "|"<expr>"|"
    | <change>
    | <id>
    | integer
    | "true"
    | "false".
<print_result> ::= "print" <expr>.